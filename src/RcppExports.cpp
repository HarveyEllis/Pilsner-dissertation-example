// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// simulator
DataFrame simulator(NumericMatrix& A, NumericMatrix& C, NumericMatrix& D, double endtime, List& parmzl, bool recording);
RcppExport SEXP _PILSNERSim_simulator(SEXP ASEXP, SEXP CSEXP, SEXP DSEXP, SEXP endtimeSEXP, SEXP parmzlSEXP, SEXP recordingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type endtime(endtimeSEXP);
    Rcpp::traits::input_parameter< List& >::type parmzl(parmzlSEXP);
    Rcpp::traits::input_parameter< bool >::type recording(recordingSEXP);
    rcpp_result_gen = Rcpp::wrap(simulator(A, C, D, endtime, parmzl, recording));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PILSNERSim_simulator", (DL_FUNC) &_PILSNERSim_simulator, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_PILSNERSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
